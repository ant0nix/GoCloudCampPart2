// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gocloudcamppart2 "github.com/ant0nix/GoCloudCampPart2"
	gomock "github.com/golang/mock/gomock"
)

// MockChangePlaylist is a mock of ChangePlaylist interface.
type MockChangePlaylist struct {
	ctrl     *gomock.Controller
	recorder *MockChangePlaylistMockRecorder
}

// MockChangePlaylistMockRecorder is the mock recorder for MockChangePlaylist.
type MockChangePlaylistMockRecorder struct {
	mock *MockChangePlaylist
}

// NewMockChangePlaylist creates a new mock instance.
func NewMockChangePlaylist(ctrl *gomock.Controller) *MockChangePlaylist {
	mock := &MockChangePlaylist{ctrl: ctrl}
	mock.recorder = &MockChangePlaylistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangePlaylist) EXPECT() *MockChangePlaylistMockRecorder {
	return m.recorder
}

// AddSong mocks base method.
func (m *MockChangePlaylist) AddSong(track gocloudcamppart2.Track) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSong", track)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSong indicates an expected call of AddSong.
func (mr *MockChangePlaylistMockRecorder) AddSong(track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSong", reflect.TypeOf((*MockChangePlaylist)(nil).AddSong), track)
}

// ChangeSong mocks base method.
func (m *MockChangePlaylist) ChangeSong(track gocloudcamppart2.Track) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSong", track)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSong indicates an expected call of ChangeSong.
func (mr *MockChangePlaylistMockRecorder) ChangeSong(track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSong", reflect.TypeOf((*MockChangePlaylist)(nil).ChangeSong), track)
}

// DeleteSong mocks base method.
func (m *MockChangePlaylist) DeleteSong(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockChangePlaylistMockRecorder) DeleteSong(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockChangePlaylist)(nil).DeleteSong), id)
}

// GetTrackD mocks base method.
func (m *MockChangePlaylist) GetTrackD(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackD", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetTrackD indicates an expected call of GetTrackD.
func (mr *MockChangePlaylistMockRecorder) GetTrackD(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackD", reflect.TypeOf((*MockChangePlaylist)(nil).GetTrackD), id)
}

// ShowSong mocks base method.
func (m *MockChangePlaylist) ShowSong() ([]gocloudcamppart2.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowSong")
	ret0, _ := ret[0].([]gocloudcamppart2.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowSong indicates an expected call of ShowSong.
func (mr *MockChangePlaylistMockRecorder) ShowSong() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSong", reflect.TypeOf((*MockChangePlaylist)(nil).ShowSong))
}

// MockStartPLaylist is a mock of StartPLaylist interface.
type MockStartPLaylist struct {
	ctrl     *gomock.Controller
	recorder *MockStartPLaylistMockRecorder
}

// MockStartPLaylistMockRecorder is the mock recorder for MockStartPLaylist.
type MockStartPLaylistMockRecorder struct {
	mock *MockStartPLaylist
}

// NewMockStartPLaylist creates a new mock instance.
func NewMockStartPLaylist(ctrl *gomock.Controller) *MockStartPLaylist {
	mock := &MockStartPLaylist{ctrl: ctrl}
	mock.recorder = &MockStartPLaylistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartPLaylist) EXPECT() *MockStartPLaylistMockRecorder {
	return m.recorder
}

// FirstSong mocks base method.
func (m *MockStartPLaylist) FirstSong() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstSong")
	ret0, _ := ret[0].(int)
	return ret0
}

// FirstSong indicates an expected call of FirstSong.
func (mr *MockStartPLaylistMockRecorder) FirstSong() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstSong", reflect.TypeOf((*MockStartPLaylist)(nil).FirstSong))
}

// LastSong mocks base method.
func (m *MockStartPLaylist) LastSong() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSong")
	ret0, _ := ret[0].(int)
	return ret0
}

// LastSong indicates an expected call of LastSong.
func (mr *MockStartPLaylistMockRecorder) LastSong() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSong", reflect.TypeOf((*MockStartPLaylist)(nil).LastSong))
}

// NextSong mocks base method.
func (m *MockStartPLaylist) NextSong(id int) (gocloudcamppart2.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextSong", id)
	ret0, _ := ret[0].(gocloudcamppart2.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextSong indicates an expected call of NextSong.
func (mr *MockStartPLaylistMockRecorder) NextSong(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextSong", reflect.TypeOf((*MockStartPLaylist)(nil).NextSong), id)
}
